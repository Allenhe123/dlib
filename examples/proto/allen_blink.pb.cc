// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: allen_blink.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "allen_blink.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Blink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Blink_reflection_ = NULL;
const ::google::protobuf::Descriptor* Yaw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Yaw_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_allen_5fblink_2eproto() {
  protobuf_AddDesc_allen_5fblink_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "allen_blink.proto");
  GOOGLE_CHECK(file != NULL);
  Blink_descriptor_ = file->message_type(0);
  static const int Blink_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blink, ears_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blink, blink_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blink, blink_num_),
  };
  Blink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Blink_descriptor_,
      Blink::default_instance_,
      Blink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Blink));
  Yaw_descriptor_ = file->message_type(1);
  static const int Yaw_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Yaw, ears_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Yaw, yaw_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Yaw, yaw_num_),
  };
  Yaw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Yaw_descriptor_,
      Yaw::default_instance_,
      Yaw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Yaw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Yaw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Yaw));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_allen_5fblink_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Blink_descriptor_, &Blink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Yaw_descriptor_, &Yaw::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_allen_5fblink_2eproto() {
  delete Blink::default_instance_;
  delete Blink_reflection_;
  delete Yaw::default_instance_;
  delete Yaw_reflection_;
}

void protobuf_AddDesc_allen_5fblink_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021allen_blink.proto\";\n\005Blink\022\014\n\004ears\030\001 \003"
    "(\001\022\021\n\tblink_idx\030\002 \003(\005\022\021\n\tblink_num\030\003 \001(\005"
    "\"5\n\003Yaw\022\014\n\004ears\030\001 \003(\001\022\017\n\007yaw_idx\030\002 \003(\005\022\017"
    "\n\007yaw_num\030\003 \001(\005", 135);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "allen_blink.proto", &protobuf_RegisterTypes);
  Blink::default_instance_ = new Blink();
  Yaw::default_instance_ = new Yaw();
  Blink::default_instance_->InitAsDefaultInstance();
  Yaw::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_allen_5fblink_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_allen_5fblink_2eproto {
  StaticDescriptorInitializer_allen_5fblink_2eproto() {
    protobuf_AddDesc_allen_5fblink_2eproto();
  }
} static_descriptor_initializer_allen_5fblink_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Blink::kEarsFieldNumber;
const int Blink::kBlinkIdxFieldNumber;
const int Blink::kBlinkNumFieldNumber;
#endif  // !_MSC_VER

Blink::Blink()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Blink::InitAsDefaultInstance() {
}

Blink::Blink(const Blink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Blink::SharedCtor() {
  _cached_size_ = 0;
  blink_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Blink::~Blink() {
  SharedDtor();
}

void Blink::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Blink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Blink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Blink_descriptor_;
}

const Blink& Blink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allen_5fblink_2eproto();
  return *default_instance_;
}

Blink* Blink::default_instance_ = NULL;

Blink* Blink::New() const {
  return new Blink;
}

void Blink::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    blink_num_ = 0;
  }
  ears_.Clear();
  blink_idx_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Blink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double ears = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ears:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_ears())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ears())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_ears;
        if (input->ExpectTag(16)) goto parse_blink_idx;
        break;
      }

      // repeated int32 blink_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blink_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_blink_idx())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_blink_idx())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_blink_idx;
        if (input->ExpectTag(24)) goto parse_blink_num;
        break;
      }

      // optional int32 blink_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blink_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blink_num_)));
          set_has_blink_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Blink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double ears = 1;
  for (int i = 0; i < this->ears_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->ears(i), output);
  }

  // repeated int32 blink_idx = 2;
  for (int i = 0; i < this->blink_idx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->blink_idx(i), output);
  }

  // optional int32 blink_num = 3;
  if (has_blink_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->blink_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Blink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double ears = 1;
  for (int i = 0; i < this->ears_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->ears(i), target);
  }

  // repeated int32 blink_idx = 2;
  for (int i = 0; i < this->blink_idx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->blink_idx(i), target);
  }

  // optional int32 blink_num = 3;
  if (has_blink_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->blink_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Blink::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 blink_num = 3;
    if (has_blink_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blink_num());
    }

  }
  // repeated double ears = 1;
  {
    int data_size = 0;
    data_size = 8 * this->ears_size();
    total_size += 1 * this->ears_size() + data_size;
  }

  // repeated int32 blink_idx = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->blink_idx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->blink_idx(i));
    }
    total_size += 1 * this->blink_idx_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Blink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Blink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Blink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Blink::MergeFrom(const Blink& from) {
  GOOGLE_CHECK_NE(&from, this);
  ears_.MergeFrom(from.ears_);
  blink_idx_.MergeFrom(from.blink_idx_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_blink_num()) {
      set_blink_num(from.blink_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Blink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Blink::CopyFrom(const Blink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Blink::IsInitialized() const {

  return true;
}

void Blink::Swap(Blink* other) {
  if (other != this) {
    ears_.Swap(&other->ears_);
    blink_idx_.Swap(&other->blink_idx_);
    std::swap(blink_num_, other->blink_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Blink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Blink_descriptor_;
  metadata.reflection = Blink_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Yaw::kEarsFieldNumber;
const int Yaw::kYawIdxFieldNumber;
const int Yaw::kYawNumFieldNumber;
#endif  // !_MSC_VER

Yaw::Yaw()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Yaw::InitAsDefaultInstance() {
}

Yaw::Yaw(const Yaw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Yaw::SharedCtor() {
  _cached_size_ = 0;
  yaw_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Yaw::~Yaw() {
  SharedDtor();
}

void Yaw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Yaw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Yaw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Yaw_descriptor_;
}

const Yaw& Yaw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allen_5fblink_2eproto();
  return *default_instance_;
}

Yaw* Yaw::default_instance_ = NULL;

Yaw* Yaw::New() const {
  return new Yaw;
}

void Yaw::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    yaw_num_ = 0;
  }
  ears_.Clear();
  yaw_idx_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Yaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double ears = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ears:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_ears())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ears())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_ears;
        if (input->ExpectTag(16)) goto parse_yaw_idx;
        break;
      }

      // repeated int32 yaw_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yaw_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_yaw_idx())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_yaw_idx())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_yaw_idx;
        if (input->ExpectTag(24)) goto parse_yaw_num;
        break;
      }

      // optional int32 yaw_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yaw_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yaw_num_)));
          set_has_yaw_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Yaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double ears = 1;
  for (int i = 0; i < this->ears_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->ears(i), output);
  }

  // repeated int32 yaw_idx = 2;
  for (int i = 0; i < this->yaw_idx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->yaw_idx(i), output);
  }

  // optional int32 yaw_num = 3;
  if (has_yaw_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->yaw_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Yaw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double ears = 1;
  for (int i = 0; i < this->ears_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->ears(i), target);
  }

  // repeated int32 yaw_idx = 2;
  for (int i = 0; i < this->yaw_idx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->yaw_idx(i), target);
  }

  // optional int32 yaw_num = 3;
  if (has_yaw_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->yaw_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Yaw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 yaw_num = 3;
    if (has_yaw_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yaw_num());
    }

  }
  // repeated double ears = 1;
  {
    int data_size = 0;
    data_size = 8 * this->ears_size();
    total_size += 1 * this->ears_size() + data_size;
  }

  // repeated int32 yaw_idx = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->yaw_idx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->yaw_idx(i));
    }
    total_size += 1 * this->yaw_idx_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Yaw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Yaw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Yaw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Yaw::MergeFrom(const Yaw& from) {
  GOOGLE_CHECK_NE(&from, this);
  ears_.MergeFrom(from.ears_);
  yaw_idx_.MergeFrom(from.yaw_idx_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_yaw_num()) {
      set_yaw_num(from.yaw_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Yaw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Yaw::CopyFrom(const Yaw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Yaw::IsInitialized() const {

  return true;
}

void Yaw::Swap(Yaw* other) {
  if (other != this) {
    ears_.Swap(&other->ears_);
    yaw_idx_.Swap(&other->yaw_idx_);
    std::swap(yaw_num_, other->yaw_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Yaw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Yaw_descriptor_;
  metadata.reflection = Yaw_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
